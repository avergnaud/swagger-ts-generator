/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

package sinapps.model.transverse.prestation

import com.nasa.model.NasaEnumFormats.PlayJsonNasaEnum
import core.util.IsEnum
import core.util.labels.Labelled
import enumeratum.{ Enum, EnumEntry }

import scala.collection.immutable

{{#enumTypeCollection}}
sealed trait {{type}} extends EnumEntry with Labelled

object {{type}} extends Enum[{{type}}] with PlayJsonNasaEnum[{{type}}] {

{{#valuesAndLabels}}
    case object {{value}} extends {{../type}} {
        val label = "{{label}}
    }
{{/valuesAndLabels}}

  override def values: immutable.IndexedSeq[{{type}}] = findValues
  implicit val isEnum: IsEnum[{{type}}] = IsEnum.create(values)

}

{{/enumTypeCollection}}



{{#if generateClasses}}
/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
export class AllEnums {
    private static _instance: AllEnums = new AllEnums();
    constructor() {
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    static get instance(): AllEnums {
        return AllEnums._instance;
    }

{{#enumTypeCollection}}
    {{type}} = {{type}};
{{/enumTypeCollection}}
}
{{/if}}
